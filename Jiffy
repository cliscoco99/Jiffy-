Jiffy: Aplicación de fotografía con música y geolocalización

1. Código Flutter (main.dart)

import 'package:flutter/material.dart';
import 'package:image_picker/image_picker.dart';
import 'package:firebase_core/firebase_core.dart';
import 'package:firebase_storage/firebase_storage.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:just_audio/just_audio.dart';
import 'package:geolocator/geolocator.dart';
import 'package:google_maps_flutter/google_maps_flutter.dart';
import 'dart:io';

void main() async {
  WidgetsFlutterBinding.ensureInitialized();
  await Firebase.initializeApp();
  runApp(JiffyApp());
}

class JiffyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      debugShowCheckedModeBanner: false,
      theme: ThemeData.dark(),
      home: JiffyHomePage(),
    );
  }
}

class JiffyHomePage extends StatefulWidget {
  @override
  _JiffyHomePageState createState() => _JiffyHomePageState();
}

class _JiffyHomePageState extends State<JiffyHomePage> {
  final ImagePicker _picker = ImagePicker();
  final FirebaseStorage _storage = FirebaseStorage.instance;
  final FirebaseFirestore _firestore = FirebaseFirestore.instance;
  final AudioPlayer _audioPlayer = AudioPlayer();
  
  XFile? _image;
  String? _imageUrl;
  String? _musicUrl;
  String? _description;
  Position? _position;

  Future<void> _pickImage() async {
    final pickedImage = await _picker.pickImage(source: ImageSource.gallery);
    if (pickedImage != null) {
      setState(() => _image = pickedImage);
    }
  }

  Future<void> _uploadImage() async {
    if (_image == null) return;
    final ref = _storage.ref().child("images/${DateTime.now().millisecondsSinceEpoch}.jpg");
    await ref.putFile(File(_image!.path));
    final url = await ref.getDownloadURL();
    setState(() => _imageUrl = url);
  }

  Future<void> _getLocation() async {
    Position position = await Geolocator.getCurrentPosition(desiredAccuracy: LocationAccuracy.high);
    setState(() => _position = position);
  }

  Future<void> _saveToFirestore() async {
    if (_imageUrl != null && _description != null) {
      await _firestore.collection("posts").add({
        "image": _imageUrl,
        "music": _musicUrl,
        "description": _description,
        "location": _position != null ? GeoPoint(_position!.latitude, _position!.longitude) : null,
      });
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text("Jiffy")),
      body: Column(
        children: [
          _image != null ? Image.file(File(_image!.path)) : Placeholder(fallbackHeight: 200),
          TextField(
            decoration: InputDecoration(hintText: "Descripción"),
            onChanged: (value) => _description = value,
          ),
          TextField(
            decoration: InputDecoration(hintText: "URL de la música"),
            onChanged: (value) => _musicUrl = value,
          ),
          ElevatedButton(onPressed: _pickImage, child: Text("Seleccionar imagen")),
          ElevatedButton(onPressed: _uploadImage, child: Text("Subir imagen")),
          ElevatedButton(onPressed: _getLocation, child: Text("Obtener ubicación")),
          ElevatedButton(onPressed: _saveToFirestore, child: Text("Guardar")),
        ],
      ),
    );
  }
}

2. Archivo codemagic.yaml

workflows:
  build-android:
    name: Build Android APK
    max_build_duration: 60
    instance_type: mac_mini_m1
    environment:
      flutter: stable
      xcode: latest
      cocoapods: default
      groups:
        - google_play
      android_signing:
        use_keystore: false
    scripts:
      - echo "Iniciando compilación de Jiffy"
      - flutter clean
      - flutter pub get
      - flutter build apk --release
    artifacts:
      - build/app/outputs/flutter-apk/app-release.apk
    publishing:
      email:
        recipients:
          - "tucorreo@gmail.com"


---

3. ¿Cómo subirlo a GitHub y compilar en Codemagic?

A) Subir el código a GitHub

1. Ve a GitHub y crea un repositorio llamado Jiffy.


2. Sube todos los archivos del código (incluyendo codemagic.yaml).


3. Haz clic en "Commit changes".



B) Forzar detección en Codemagic

1. Ve a Codemagic.io y elimina la app si ya la agregaste antes.


2. Vuelve a conectar Codemagic con tu repositorio en GitHub.


3. Haz clic en "Check for configuration file".


4. Si ahora lo detecta, inicia el build.




---

Correcciones y mejoras:

✅ Limpieza del proyecto (flutter clean) antes de compilar para evitar errores. ✅ Agregado xcode y cocoapods (aunque solo es relevante para iOS, previene problemas en Codemagic). ✅ Aumentado max_build_duration a 60 minutos para evitar fallos por tiempo límite. ✅ Mensaje de inicio echo "Iniciando compilación de Jiffy" para verificar que el build inicia correctamente.

Ahora vuelve a intentarlo en Codemagic. Si sigue fallando, dime qué mensaje de error exacto te aparece.

